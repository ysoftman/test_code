!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
W	tensorflow_test1.py	/^W = tf.Variable(tf.random_uniform([1], -1.0, 1.0))$/;"	kind:variable	line:11
assignments	k-means-clustering.py	/^assignments = tf.argmin(distances, 0)$/;"	kind:variable	line:36
b	tensorflow_test1.py	/^b = tf.Variable(tf.zeros([1]))$/;"	kind:variable	line:12
centroids	k-means-clustering.py	/^centroids = tf.Variable($/;"	kind:variable	line:26
data	k-means-clustering.py	/^data = {"x": [], "y": [], "cluster": []}$/;"	kind:variable	line:63
df	k-means-clustering.py	/^df = pd.DataFrame(data)$/;"	kind:variable	line:68
df	k-means-clustering.py	/^df = pd.DataFrame({"x": [v[0] for v in vector_values],$/;"	kind:variable	line:19
distances	k-means-clustering.py	/^distances = tf.reduce_sum($/;"	kind:variable	line:34
expanded_centroids	k-means-clustering.py	/^expanded_centroids = tf.expand_dims(centroids, 1)$/;"	kind:variable	line:29
expanded_vectors	k-means-clustering.py	/^expanded_vectors = tf.expand_dims(vectors, 0)$/;"	kind:variable	line:28
init	tensorflow_test1.py	/^init = tf.global_variables_initializer()$/;"	kind:variable	line:21
init_op	k-means-clustering.py	/^init_op = tf.initialize_all_variables()$/;"	kind:variable	line:50
input1	tensorflow_test2.py	/^input1 = tf.placeholder(tf.float32)$/;"	kind:variable	line:3
input2	tensorflow_test2.py	/^input2 = tf.placeholder(tf.float32)$/;"	kind:variable	line:4
k-means-clustering.py	k-means-clustering.py	1;"	kind:file	line:1
loss	tensorflow_test1.py	/^loss = tf.reduce_mean(tf.square(y - y_data))$/;"	kind:variable	line:16
means	k-means-clustering.py	/^means = tf.concat(0, [$/;"	kind:variable	line:38
np	k-means-clustering.py	/^import numpy as np$/;"	kind:namespace	line:1
np	tensorflow_test1.py	/^import numpy as np$/;"	kind:namespace	line:2
num_clusters	k-means-clustering.py	/^num_clusters = 3$/;"	kind:variable	line:9
num_steps	k-means-clustering.py	/^num_steps = 100$/;"	kind:variable	line:10
num_vectors	k-means-clustering.py	/^num_vectors = 1000$/;"	kind:variable	line:8
optimizer	tensorflow_test1.py	/^optimizer = tf.train.GradientDescentOptimizer(0.5)$/;"	kind:variable	line:17
output	tensorflow_test2.py	/^output = tf.mul(input1, input2)$/;"	kind:variable	line:5
pd	k-means-clustering.py	/^import pandas as pd$/;"	kind:namespace	line:3
plt	k-means-clustering.py	/^import matplotlib as plt$/;"	kind:namespace	line:2
sb	k-means-clustering.py	/^import seaborn as sb$/;"	kind:namespace	line:4
sess	k-means-clustering.py	/^sess = tf.Session()$/;"	kind:variable	line:52
sess	tensorflow_test1.py	/^sess = tf.Session()$/;"	kind:variable	line:24
tensorflow_test1.py	tensorflow_test1.py	1;"	kind:file	line:1
tensorflow_test2.py	tensorflow_test2.py	1;"	kind:file	line:1
tf	k-means-clustering.py	/^import tensorflow as tf$/;"	kind:namespace	line:5
tf	tensorflow_test1.py	/^import tensorflow as tf$/;"	kind:namespace	line:1
tf	tensorflow_test2.py	/^import tensorflow as tf$/;"	kind:namespace	line:1
train	tensorflow_test1.py	/^train = optimizer.minimize(loss)$/;"	kind:variable	line:18
update_centroids	k-means-clustering.py	/^update_centroids = tf.assign(centroids, means)$/;"	kind:variable	line:48
vector_values	k-means-clustering.py	/^vector_values = []$/;"	kind:variable	line:11
vectors	k-means-clustering.py	/^vectors = tf.constant(vector_values)$/;"	kind:variable	line:25
x_data	tensorflow_test1.py	/^x_data = np.random.rand(100).astype(np.float32)$/;"	kind:variable	line:5
y	tensorflow_test1.py	/^y = W * x_data + b$/;"	kind:variable	line:13
y_data	tensorflow_test1.py	/^y_data = x_data * 0.1 + 0.3$/;"	kind:variable	line:6

// 실패할 가능성이 있는 값을 리턴할 수 있도록 해주는 Result라 불리는 내장된 generic enum이 있습니다.
// 이는 Rust에서 오류 처리를 하는 관용적인 방법입니다.
// enum Result<T, E> {
//     Ok(T),
//     Err(E),
// }
fn add(a: u32, b: u32) -> Result<u32, String> {
    if a > 0 && b > 0 {
        Ok(a + b)
    } else {
        Err(String::from("can't add numbers"))
    }
}
// Main에서 Result 사용시 기본적으로 값은 리턴할 수 없지만, 오류를 리턴할 수 있다.
fn main() -> Result<(), String> {
    let r = add(1, 2);
    match r {
        Ok(v) => println!("ok {}", v),
        Err(e) => println!("err {}", e),
    }

    // match 없이 ? 로 간결하게 할 수 있다.
    let r = add(1, 2)?;
    println!("{}", r);

    // unwrap() 으로 값을 가져 올 수 있지만 에러 처리가 없어 panic이 발생할 수 있다.
    // ? 과 다른점은 Option None, Result Err 에 panic! 으로 처리한다.
    // match my_option {
    //     Some(v) => v,
    //     None => panic!("some error message generated by Rust!"),
    // }
    // match my_result {
    //     Ok(v) => v,
    //     Err(e) => panic!("some error message generated by Rust!"),
    // }
    let r = add(1, 2).unwrap();
    println!("{}", r);

    // () 로 아무값도 리턴하지 않고 에러 없이 끝났음을 나타낸다.
    Ok(())
}

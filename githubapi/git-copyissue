#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ysoftman
A깃헙 a저장소 -> B깃헙 b저장소 로 이슈 복사
chmod +x git-copyissue
git copyissue
"""

import requests
import json
import sys
import subprocess


# 참고 github api
# https://developer.github.com/enterprise/2.13/v3/issues/#get-a-single-issue
# https://developer.github.com/enterprise/2.13/v3/issues/#create-an-issue
# https://developer.github.com/enterprise/2.13/v3/issues/#edit-an-issue
# https://docs.github.com/en/rest/reference/issues#get-an-issue
# https://docs.github.com/en/rest/reference/issues#create-an-issue
# https://docs.github.com/en/rest/reference/issues#update-an-issue


class color:
    reset_color = "\033[0m"
    black = "\033[0;30m"
    red = "\033[0;31m"
    green = "\033[0;32m"
    yellow = "\033[0;33m"
    blue = "\033[0;34m"
    purple = "\033[0;35m"
    cyan = "\033[0;36m"
    white = "\033[0;37m"


class Repo:
    def __init__(self, user="", passwd="", baseURL="", owner="", repo=""):
        self.user = user
        self.passwd = passwd
        self.baseURL = baseURL
        self.owner = owner
        self.repo = repo
        self.issueURL = ""

    def printAll(self, name):
        print(color.green + name + ".user:", self.user, color.reset_color)
        print(color.green + name + ".passwd:", self.passwd, color.reset_color)
        print(color.green + name + ".baseURL:", self.baseURL, color.reset_color)
        print(color.green + name + ".owner:", self.owner, color.reset_color)
        print(color.green + name + ".repo:", self.repo, color.reset_color)
        print(color.green + name + ".issueURL:", self.issueURL, color.reset_color)


fromRepo = Repo()
toRepo = Repo()


def get_an_issue(repoInfo, issue_number):
    url = "{}/{}".format(repoInfo.issueURL, issue_number)
    # print(color.yellow + url + color.reset_color)
    resp = requests.get(url, auth=(repoInfo.user, repoInfo.passwd))
    issue_resp = json.loads(resp.content)

    for key, value in issue_resp.items():
        if key == "message" and value.lower() == "not found":
            print(color.red + "not found", color.reset_color)
            return None

    print(
        color.green
        + "[{}/{}/{}] get issue, number:{} title:{} state:{}".format(
            repoInfo.baseURL,
            repoInfo.owner,
            repoInfo.repo,
            issue_resp["number"],
            issue_resp["title"],
            issue_resp["state"],
        )
        + color.reset_color
    )
    return issue_resp


def create_issue(repoInfo, issue):
    # {
    #   "title": "Found a bug",
    #   "body": "I'm having a problem with this.",
    #   "assignees": [
    #     "octocat"
    #   ],
    #   "milestone": 1,
    #   "labels": [
    #     "bug"
    #   ]
    # }
    data = {}
    data["title"] = issue["title"]
    data["body"] = issue["body"]
    data["assignees"] = []
    # print("type:", type(issue["assignees"]), len(issue["assignees"]))
    for item in issue["assignees"]:
        data["assignees"].append(item["login"])
    # data["milestone"] = 0
    data["labels"] = issue["labels"]
    headers = {
        "Content-Type": "application/vnd.github.v3+json",
    }
    url = "{}".format(repoInfo.issueURL)

    # curlCommand = "curl -XPOST --user '{}:{}' -H '{}' -d '{}' '{}'".format(
    #     repoInfo.user, repoInfo.passwd, json.dumps(headers), json.dumps(data), url
    # )
    # print(color.yellow + curlCommand + color.reset_color)

    resp = requests.post(
        url, json.dumps(data), headers=headers, auth=(repoInfo.user, repoInfo.passwd)
    )
    issue_resp = json.loads(resp.content)
    for key, value in issue_resp.items():
        # print(color.purple + "[create issue response]", key, value, color.reset_color)
        if key == "message" and value.lower() == "not found":
            print(color.red + "not found", color.reset_color)
            return None
    print(
        color.yellow
        + "[{}/{}/{}] create issue, number:{} title:{} state:{}".format(
            repoInfo.baseURL,
            repoInfo.owner,
            repoInfo.repo,
            issue_resp["number"],
            issue_resp["title"],
            issue_resp["state"],
        )
        + color.reset_color
    )
    update_issue(repoInfo, issue_resp["number"], issue["state"])


def update_issue(repoInfo, issue_number, state):
    data = {}
    data["state"] = state
    headers = {
        "Content-Type": "application/vnd.github.v3+json",
    }
    url = "{}/{}".format(repoInfo.issueURL, issue_number)
    resp = requests.patch(
        url, json.dumps(data), headers=headers, auth=(repoInfo.user, repoInfo.passwd)
    )
    issue_resp = json.loads(resp.content)
    for key, value in issue_resp.items():
        # print(color.purple + "[update issue response]", key, value, color.reset_color)
        if key == "message" and value.lower() == "not found":
            print(color.red + "not found", color.reset_color)
            return None
    print(
        color.yellow
        + "[{}/{}/{}] update issue, number:{} title:{} state:{}".format(
            repoInfo.baseURL,
            repoInfo.owner,
            repoInfo.repo,
            issue_resp["number"],
            issue_resp["title"],
            issue_resp["state"],
        )
        + color.reset_color
    )


def setRepoInfo(repoInfo, inputStr):
    if len(inputStr) != 3:
        print(color.red + "wrong repository format" + color.reset_color)
        exit(1)

    id_password = inputStr[0].split("@")[0].split(":")
    if len(id_password) != 2:
        print(color.red + "wrong id:password format" + color.reset_color)
        exit(2)

    repoInfo.user = id_password[0]
    repoInfo.passwd = id_password[1]
    repoInfo.baseURL = "https://" + inputStr[0].split("@")[1]
    repoInfo.owner = inputStr[1]
    repoInfo.repo = inputStr[2]

    # 일반 깃헙
    if repoInfo.baseURL == "https://github.com":
        # print("[https://api.github.com]")
        repoInfo.issueURL = "https://api.github.com/repos/{}/{}/issues".format(
            repoInfo.owner, repoInfo.repo
        )
    # for github enterprise
    else:
        repoInfo.issueURL = "{}/api/v3/repos/{}/{}/issues".format(
            repoInfo.baseURL, repoInfo.owner, repoInfo.repo
        )

    return


if __name__ == "__main__":
    print(
        color.cyan
        + "[From-Repository, ex) id:password@lemon.github.com/ysoftman/repo1 ]"
        + color.reset_color
    )
    setRepoInfo(fromRepo, input("From-Repository) ").split("/"))

    print(color.cyan + "[From-IssueNumbers, ex) 1,2,10" + color.reset_color)
    inputFromIssueNumbers = input("From-IssueNumbers) ").split(",")
    if len(inputFromIssueNumbers) == 0:
        print(color.red + "wrong (From-IssueNumbers) format" + color.reset_color)
        exit(1)
    for item in inputFromIssueNumbers:
        try:
            int(item)
        except ValueError:
            print(
                color.red + "ValueError (From-IssueNumbers) =>" + color.reset_color,
                item,
            )
            exit(1)

    print(
        color.cyan
        + "[To-Repository, ex) id:password@apple.github.com/ysoftman/repo1 ]"
        + color.reset_color
    )
    setRepoInfo(toRepo, input("To-Repository) ").split("/"))

    # for debugging
    # fromRepo.printAll("from")
    # print(color.yellow + "FromIssueNumbers:", inputFromIssueNumbers, color.reset_color)
    # toRepo.printAll("to")

    for inum in inputFromIssueNumbers:
        issue = get_an_issue(fromRepo, inum)
        if issue == None:
            continue
        create_issue(toRepo, issue)

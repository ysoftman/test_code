#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
ysoftman

브랜치명이 xxx-이슈번호 인 경우,
github 의 이슈타이틀을 파악해서 현재 로컬 브랜치에 정보에 같이 표시한다.
git-command 형태의 파일로 실행모드를 추가하고 다음과 같이 실행 한다.

chmod +x git-br
git br

참고로 git branch 가 git br 로 alias 로 설정되더라고, 현재 위치에선 git-br 이 실행된다.
'''

import requests
import json
import sys
import subprocess

# utf8 인코딩을 기본으로 하지 않으면
# git br | grep ysoftman
# 과 같은 파이프라인 처리시 UnicodeEncodeError 가 발생한다.
reload(sys)
sys.setdefaultencoding('utf8')

# github 접속 정보를 명시
# https://developer.github.com/v3/issues/
user = "ysoftman"
passwd = ""
baseurl = "https://api.github.com"
owner = "ysoftman"
repo = "test_code"
issue_base_url = "https://github.com/{}/{}/issues/".format(
    owner, repo)


class color:
    reset_color = '\033[0m'
    black = '\033[0;30m'
    red = '\033[0;31m'
    green = '\033[0;32m'
    yellow = '\033[0;33m'
    blue = '\033[0;34m'
    purple = '\033[0;35m'
    cyan = '\033[0;36m'
    white = '\033[0;37m'


def issue_list(branches):
    # state=all 에 로컬 이슈번호가 없는 경우가 있어, open, closed 로 나눠서 요청
    url = "{}/repos/{}/{}/issues?state=open".format(baseurl, owner, repo)
    resp = requests.get(url, auth=(user, passwd))
    open_issue_result = json.loads(resp.content)

    url = "{}/repos/{}/{}/issues?state=closed".format(baseurl, owner, repo)
    resp = requests.get(url, auth=(user, passwd))
    closed_issue_result = json.loads(resp.content)

    for br_name in branches:
        tokens = br_name.split('-')
        if len(tokens) == 2:
            for item in open_issue_result:
                if tokens[1] == str(item['number']) and item['state'] == 'open':
                    print color.yellow + br_name + " " + item['state'], color.reset_color + item['title'], color.green + issue_base_url + tokens[1] + color.reset_color
                    del open_issue_result[open_issue_result.index(item)]
                    del branches[branches.index(br_name)]
                    break
    for br_name in branches:
        tokens = br_name.split('-')
        if len(tokens) == 2:
            for item in closed_issue_result:
                if tokens[1] == str(item['number']) and item['state'] == 'closed':
                    print color.cyan + br_name + " " + item['state'], color.reset_color + item['title'], color.green + issue_base_url + tokens[1] + color.reset_color
                    del closed_issue_result[closed_issue_result.index(item)]
                    del branches[branches.index(br_name)]
                    break

    for br_name in branches:
        print br_name

if __name__ == '__main__':
    result = subprocess.Popen("git branch", shell=True,
                              stdout=subprocess.PIPE).stdout.read()
    issue_list(result.splitlines())

// ysoftman
// 레퍼런스 변수
#include <stdio.h>

int main() {
    int a = 12345;
    // 일반변수 선언
    int b = a;
    // 레퍼런스 변수 선언
    int &c = a;
    // 포인터 변수 선언
    int *p = &a;

    // 레퍼런스 변수는 참조하는 변수의 alias 로 이름만 다를뿐 참조 하는 변수의 메모리 공간(주소)을
    // 공유하기 때문에 레퍼런스 변수를 자신을 위한 별도의 메모리 할당이 없다. 포인터 변수는 포인터
    // 변수 자신을 위한 별도의 메모리를 할당 받고 포인터 변수의 값은 포인터 변수가
    // 가리키는(참조하는) 변수의 주소값을 저장한다.
    printf("a=%d(%p) b_addr=%d(%p) c=%d(%p) p=%d(%p,%p)\n", a, &a, b, &b, c, &c, *p, p, &p);

    // 참조하는 변수가 값이 바뀌면 참조하는 레퍼런스 변수 값도 같이 변경된다.(a주소공간을 공유)
    a = 99999;
    printf("a=%d(%p) b_addr=%d(%p) c=%d(%p) p=%d(%p,%p)\n", a, &a, b, &b, c, &c, *p, p, &p);

    // 레퍼런스 변수 값을 바꾸면 참조되는 일반 변수 값도 변경된다.(a주소공간을 공유)
    c = 11111;
    printf("a=%d(%p) b_addr=%d(%p) c=%d(%p) p=%d(%p,%p)\n", a, &a, b, &b, c, &c, *p, p, &p);

    // int& x 나 int &x 나 코딩스타일만 다를뿐 차이가 없다.
    // 레퍼런스 변수 x 는 선언과 동시에 참조할 값을 설정해야 한다.(매개변수로 사용될때는 예외)
    int &x = a, y = 1;
    printf("x=%d y=%d\n", x, y);

    return 0;
}
